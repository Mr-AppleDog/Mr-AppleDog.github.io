<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>(三)存储器</title>
    <link href="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%89/"/>
    <url>/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h4 id="3-1概述"><a href="#3-1概述" class="headerlink" title="3.1概述"></a>3.1概述</h4><h5 id="3-1-1存储器的分类"><a href="#3-1-1存储器的分类" class="headerlink" title="3.1.1存储器的分类"></a>3.1.1存储器的分类</h5><p>按存储介质分类：</p><ul><li>半导体存储器TTL 、MOS</li><li>磁表面存储器    磁头、磁载体</li><li>磁芯存储器        硬磁材料、环中元件</li><li>光盘存储器        激光、磁光材料</li></ul><p>按存取方式分类：</p><p>​存取时间与物理地址无关（随机访问）</p><ul><li>随机存取器       在程序的执行过程中可读可写</li><li>只读存储器       在程序的执行过程中只读</li></ul><p>​存取时间与物理地址有关（串行访问）</p><ul><li>顺序存取存储器     磁带</li><li>直接存取存储器     磁盘</li></ul><p>按在计算机中的作用分类：</p><p><img src="C:\Users\cxy784853792\Downloads\uTools_1680746210472.png"></p><h5 id="3-1-2存储器的层次结构"><a href="#3-1-2存储器的层次结构" class="headerlink" title="3.1.2存储器的层次结构"></a>3.1.2存储器的层次结构</h5><p><img src="C:\Users\cxy784853792\Downloads\uTools_1680746508991.png"></p><p><img src="C:\Users\cxy784853792\Downloads\uTools_1680746536901.png"></p><h4 id="3-2主存储器"><a href="#3-2主存储器" class="headerlink" title="3.2主存储器"></a>3.2主存储器</h4><h5 id="3-2-1概述"><a href="#3-2-1概述" class="headerlink" title="3.2.1概述"></a>3.2.1概述</h5><p>主存的基本组成</p><p>主存与CPU</p><h5 id="3-2-2半导体存储芯片介绍"><a href="#3-2-2半导体存储芯片介绍" class="headerlink" title="3.2.2半导体存储芯片介绍"></a>3.2.2半导体存储芯片介绍</h5><h5 id="3-2-3随机读取存储器"><a href="#3-2-3随机读取存储器" class="headerlink" title="3.2.3随机读取存储器"></a>3.2.3随机读取存储器</h5><h5 id="3-2-4只读存储器"><a href="#3-2-4只读存储器" class="headerlink" title="3.2.4只读存储器"></a>3.2.4只读存储器</h5><h5 id="3-2-5存储器与CPU的连接"><a href="#3-2-5存储器与CPU的连接" class="headerlink" title="3.2.5存储器与CPU的连接"></a>3.2.5存储器与CPU的连接</h5><h5 id="3-2-6存储器的校验"><a href="#3-2-6存储器的校验" class="headerlink" title="3.2.6存储器的校验"></a>3.2.6存储器的校验</h5><h5 id="3-2-7提高访存速度的措施"><a href="#3-2-7提高访存速度的措施" class="headerlink" title="3.2.7提高访存速度的措施"></a>3.2.7提高访存速度的措施</h5><h4 id="3-3高速缓冲存储器"><a href="#3-3高速缓冲存储器" class="headerlink" title="3.3高速缓冲存储器"></a>3.3高速缓冲存储器</h4><h5 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1 概述"></a>3.3.1 概述</h5><h5 id="3-3-2-Cache——主存地址映射"><a href="#3-3-2-Cache——主存地址映射" class="headerlink" title="3.3.2 Cache——主存地址映射"></a>3.3.2 Cache——主存地址映射</h5><h5 id="3-3-3替换策略"><a href="#3-3-3替换策略" class="headerlink" title="3.3.3替换策略"></a>3.3.3替换策略</h5><h4 id="3-4辅助存储器"><a href="#3-4辅助存储器" class="headerlink" title="3.4辅助存储器"></a>3.4辅助存储器</h4><h5 id="3-4-1概述"><a href="#3-4-1概述" class="headerlink" title="3.4.1概述"></a>3.4.1概述</h5><h5 id="3-4-2磁记录原理和记录方式"><a href="#3-4-2磁记录原理和记录方式" class="headerlink" title="3.4.2磁记录原理和记录方式"></a>3.4.2磁记录原理和记录方式</h5><h5 id="3-4-3硬度磁盘存储器"><a href="#3-4-3硬度磁盘存储器" class="headerlink" title="3.4.3硬度磁盘存储器"></a>3.4.3硬度磁盘存储器</h5><h5 id="3-4-4软磁盘存储器"><a href="#3-4-4软磁盘存储器" class="headerlink" title="3.4.4软磁盘存储器"></a>3.4.4软磁盘存储器</h5><h5 id="3-4-5磁带存储器"><a href="#3-4-5磁带存储器" class="headerlink" title="3.4.5磁带存储器"></a>3.4.5磁带存储器</h5><h5 id="3-4-6循环冗余校验码"><a href="#3-4-6循环冗余校验码" class="headerlink" title="3.4.6循环冗余校验码"></a>3.4.6循环冗余校验码</h5><h5 id="3-4-7光盘存储器"><a href="#3-4-7光盘存储器" class="headerlink" title="3.4.7光盘存储器"></a>3.4.7光盘存储器</h5>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(二)系统总线</title>
    <link href="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/"/>
    <url>/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="2-1系统总线的基本概念"><a href="#2-1系统总线的基本概念" class="headerlink" title="2.1系统总线的基本概念"></a>2.1系统总线的基本概念</h4><h5 id="2-1-1什么是总线？"><a href="#2-1-1什么是总线？" class="headerlink" title="2.1.1什么是总线？"></a>2.1.1什么是总线？</h5><p>总线是连接各个部件的信息传输线，是各个部件共享的传输介质</p><h5 id="2-1-2总线上的信息传送"><a href="#2-1-2总线上的信息传送" class="headerlink" title="2.1.2总线上的信息传送"></a>2.1.2总线上的信息传送</h5><p>串行</p><p>并行</p><h4 id="2-2-总线的分类"><a href="#2-2-总线的分类" class="headerlink" title="2.2 总线的分类"></a>2.2 总线的分类</h4><h5 id="2-2-1-片内总线"><a href="#2-2-1-片内总线" class="headerlink" title="2.2.1 片内总线"></a>2.2.1 片内总线</h5><p>片内总线：指芯片内部的总线，如在CPU芯片内部，寄存器与寄存器之间，寄存器与算逻单元ALU之间都由片内总线连接</p><h5 id="2-2-2-系统总线"><a href="#2-2-2-系统总线" class="headerlink" title="2.2.2 系统总线"></a>2.2.2 系统总线</h5><p>系统总线分三类：数据总线、地址总线、控制总线</p><p>数据总线：用来传输各个功能部件之间的数据信息，它是双向传输总线，其位数与机器字长、存储字长有关</p><p>地址总线：主要用来指出数据总线上的源数据或目的数据在主存单元的地址或I&#x2F;O设备地址，单项传输，与存储地址、I&#x2F;O地址有关</p><p>控制总线：用来发出各种控制信号的传输线，控制信号有输入（存储器读、存储器写、总线允许、中断确认）；控制信号有输出（中断请求、总线请求）</p><p>常见的控制型号如下：</p><ul><li>时钟：用来同步各个操作</li><li>复位：初始化所有部件</li><li>总线请求：表示某部件需获得总线使用权</li><li>总线允许：表示需要获得总线使用权的部件以获得控制权</li><li>中断请求：表示某部件提出中断请求</li><li>中断响应：表示中断请求已被接收</li><li>存储器写：将数据总线上的数据写至存储器的指定单元内</li><li>存储器读：将指定存储单元中的数据读到数据总线上</li><li>I&#x2F;O读：从指定的I&#x2F;O端口将数据读到数据总线上</li><li>I&#x2F;O写：将数据总线上的数据输出到指定的I&#x2F;O端口内</li><li>传输响应:表示数据应被接受，或已将数据送至数据总线上</li></ul><h5 id="2-2-3-通信总线"><a href="#2-2-3-通信总线" class="headerlink" title="2.2.3 通信总线"></a>2.2.3 通信总线</h5><p>通信总线：用于计算机系统之间或计算机系统与其他系统（控制仪表、移动通信等）之间的通信</p><p>传输方式：串行通信总线、并行同行总线</p><p>串行总线：是指数据在单条1位宽的传输线上，一位一位地按顺序分时传送，如1字节的数据，在串行传送中，1字节的数据要通过8此有地位到高位按顺序逐位传输</p><p>并行总线：是指数据在多条并行在1位宽的传输线上，同时由源传送到目的地，如1字节的数据，在并行传送中，要通过8条并行传输线同时由源传送到目的地。</p><h4 id="2-3总线特性及性能指标"><a href="#2-3总线特性及性能指标" class="headerlink" title="2.3总线特性及性能指标"></a>2.3总线特性及性能指标</h4><h5 id="2-3-1-总线的特征"><a href="#2-3-1-总线的特征" class="headerlink" title="2.3.1 总线的特征"></a>2.3.1 总线的特征</h5><ul><li>机型特性：尺寸、形状、管脚数 及排列顺序</li><li>电器特性：传输方向和有效的电平范围</li><li>功能特性：每根传输线的功能</li></ul><p>​功能分类：地址、数据、控制</p><p>​地址总线：用来指出地址码</p><p>​数据总线：用来传递数据</p><p>​控制总线：发出信号控制，既有从CPU发出的如存储器的读&#x2F;写、I&#x2F;O的读&#x2F;写，也有I&#x2F;O向CPU发来的，如中断请求、DMA请求</p><ul><li>时间特性：信号的时序关系</li></ul><h5 id="2-3-2-总线性能指标"><a href="#2-3-2-总线性能指标" class="headerlink" title="2.3.2 总线性能指标"></a>2.3.2 总线性能指标</h5><ul><li>总线宽度：数据线的根数</li><li>标准传输率：每秒传输的最大字节数（MBps）</li><li>时钟同步&#x2F;异步：同步、不同步</li><li>总线复用：地址线与数据线复用</li><li>信号线数：地址线、数据线、控制线的总和</li><li>总线控制方式：突发、自动、仲裁、逻辑、技术</li><li>其他指标：负载能力</li></ul><h5 id="2-3-3总线标准"><a href="#2-3-3总线标准" class="headerlink" title="2.3.3总线标准"></a>2.3.3总线标准</h5><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110537846.png" class="" title="image-20230828110537846"><h4 id="2-4总线结构"><a href="#2-4总线结构" class="headerlink" title="2.4总线结构"></a>2.4总线结构</h4><h5 id="2-4-1-单总线结构"><a href="#2-4-1-单总线结构" class="headerlink" title="2.4.1 单总线结构"></a>2.4.1 单总线结构</h5><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110613375.png" class="" title="image-20230828110613375"><h5 id="2-4-2多总线结构"><a href="#2-4-2多总线结构" class="headerlink" title="2.4.2多总线结构"></a>2.4.2多总线结构</h5><p>双总线结构</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110652825.png" class="" title="image-20230828110652825"><h5 id="三总线结构"><a href="#三总线结构" class="headerlink" title="三总线结构"></a>三总线结构</h5><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110711335.png" class="" title="image-20230828110711335"><p>三总线的另一结构</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110728329.png" class="" title="image-20230828110728329"><h5 id="四总线结构"><a href="#四总线结构" class="headerlink" title="四总线结构"></a>四总线结构</h5><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110750849.png" class="" title="image-20230828110750849"><h5 id="2-4-3总线结构举例"><a href="#2-4-3总线结构举例" class="headerlink" title="2.4.3总线结构举例"></a>2.4.3总线结构举例</h5><p>传统微型机总线</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110815002.png" class="" title="image-20230828110815002"><p>VL-BUS局部总线结构</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110840540.png" class="" title="image-20230828110840540"><p>PCI总线结构</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110904069.png" class="" title="image-20230828110904069"><p>多层 PCI 总线结构</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828110922273.png" class="" title="image-20230828110922273"><h4 id="2-5总线控制"><a href="#2-5总线控制" class="headerlink" title="2.5总线控制"></a>2.5总线控制</h4><h5 id="2-5-1-总线判优控制"><a href="#2-5-1-总线判优控制" class="headerlink" title="2.5.1 总线判优控制"></a>2.5.1 总线判优控制</h5><p>基本概念：</p><ul><li><p>主模块对总线有控制权</p></li><li><p>从模块        响应从主设备发来的总线命令</p></li><li><p>总线判优控制：集中式、分布式</p><p>集中式包括：</p><ul><li>链式查询</li><li>计数器定时查询</li><li>独立请求方式</li></ul></li></ul><p>链式查询方式</p><p>下图为链式查询，图中控制总线有3根线用于总线控制（BS总线忙、BR总线请求、BG总线统一），其中总线同意是串行的一个I&#x2F;O接口送至下一个I&#x2F;O接口。如果BG达到的接口有请求，BG信号就不再往下传，意味着改接口获得了总线的使用全，并建立总线忙BS信号，表示它占用了总线，可见在链式查询中，离总线控制部件最近的设备具有最高的优先级。这种方式的特点是：只需很少几根线就能按一定优先次序实现总线控制，并且很容易扩充设备，！对电路故障很敏感，且优光级别低的设备可能很难获得请求。</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828111006976.png" class="" title="image-20230828111006976"><p>计数器定时查询方式</p><p>下图是计数器定时查询方式。与链式查询方式相比，多了一组设备地址线，少了一<br>根总线同意线BG。总线控制部件接到由BR送来的总线请求信号后，在总线未被使用(BS&#x3D;0)<br>的情况下，总线控制部件屮的计数器开始计数，并通过设备地址线.向各设备发出一组地址信号。<br>当某个请求占用总线的设备地址与计数值一致时，便获得总线使用权，此吋终止计数查询。这种<br>方式的特点是：计数可以从“0”开始，此时一且设备的优先次序被固定，设备的优先级就按<br>0,1,…,n的顺序降序排列，而且固定不变；计数也可以从上一次计数的终止点开始，即是一种循<br>环方法，此时设备使用总线的优先级相等；计数器的初始值还可由程序设置，战优先次序可以改变。<br>这种方式对电路故障不如链式查询方式敏感，但增加了控制线（设备地址）数，控制也较复杂。</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828111057390.png" class="" title="image-20230828111057390"><p>​独立亲求方式</p><p>下图是独立请求方式。由图中可见，每一台设备均有一对总线请求线BR,和总线同意线BG:。当设备要求使用总线时，便发出该设备的请求信号。总线挖制部件中有一排队电路，可根据优先次序确定响应哪一台设备的靖求。这种方式的特点是：响应速度快，优先次序控制灵活（通过程序改变），似控制线数量多，总线控删更复杂。链式查询中仪用两根线确定总线使用权属于哪个设备，在计数器查询巾大致用log2 n根线，其中n是允许接纳的最大设备数，而独立请求方式需采用2n根线。</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828111148122.png" class="" title="image-20230828111148122"><h5 id="1-5-2总线通信控制"><a href="#1-5-2总线通信控制" class="headerlink" title="1.5.2总线通信控制"></a>1.5.2总线通信控制</h5><p>目的：解决通信双方协调配合问题</p><p>总线传输周期：</p><ul><li>中请分配阶段：由需要使用总线的主模块（或主设备）提出申请，经总线仲裁机构决定下一传输周期的总线使用权授于某一申请者。</li><li>寻址阶段：取得了使用权的主模块通过总线发出本次要访问的从模块（或从设备）的地址及有关命令，启动参与木次传输的从模块。</li><li>传数阶段：主模块和从模块进行数据交换，数据由源模块发出，经数据总线流人目的模块。</li><li>结束阶段：主模块的有关信息均从系统总线上撒除，让出总线使用权。</li></ul><p>总线通信的四种方式：</p><ul><li>同步通信：有统一时标控制数据传送</li><li>异步通信：采用应答方式，没有公共时钟标准</li><li>半同步通信：同步、异步结合</li><li>分离式通信：充分挖掘系统 总线每个瞬间的潜力</li></ul><p>某个输入设备向CPU传输数据的同步通信（同步式数据输入传输）</p><p>对于读命令，其传输周期如下：</p><ul><li>T1:主模块发地址。</li><li>T2:主模块发读命令。</li><li>T3:从模块提供数据。</li><li>T4:主模块撤销读命令，从模央撤销数据。</li></ul><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828111244151.png" class="" title="image-20230828111244151"><p>图中总线传输周期是连接在总线上的两个部件完成一次完整且可靠的信息传输时间，它包<br>含4个时钟周期T1、T2、T3、T4。<br>        CPU在T1上升沿发出地址信息；在T2的上升沿发出读命令；与地址信号相符合的输入设备<br>按命令进行一系列内部操作，且必须在T3的上升沿到来之前将CPU所需的数据送到数据总线<br>上：CPU在T3时钟周期内，将数据线上的信息送到其内部寄存器中；CPU在T4的上升沿撤销读<br>命令，输入设备不再向数据总线上传送数据，撤销它对数据总线的驱动。如果总线采用三态驱动<br>电路，则从T4起，数据总线呈浮空状态。</p><p>同步式数据输出传输</p><p>对于写命令，其传输周期如下：</p><ul><li>T1:主模块发地址</li><li>T1.5：主模块提供数据。</li><li>T2：主模块发出写命令，从模块接收到命令后，必须在规定时间内将数据总线上的数据写到<br>地址总线所指明的单元中。</li><li>T4：主模块撤销写命令和数据等信号。</li></ul><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828111309016.png" class="" title="image-20230828111309016"><p>这种通信的优点是规定明确、统一，模块间的配合简单一致。其缺点是主、从模块时间配合属于强制性“同步”，必须在限定时问内完成规定的要求。并对所有从模块都用同一限时，这就势必造成，对各不相同速度的部件而市，必须按最慢速度的部件来设计公共时钟，严重影响总线的工作效率，也给设计带来了局限性，缺乏贝活性。</p><p>同步通信一般用于总线长度较短、各部件存取时问比较一致的场合。</p><p>在同步通信的总线系统中，总线传输周期越短，数据线的位数越多，直接影响总线的数据传输率。</p><p>异步通信</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828111331035.png" class="" title="image-20230828111331035"><p>1、不互锁方式</p><p>主模块发出请求信号后，不必等待接到从模块的回答信号，而是经过一段时间，确认从模块<br>已收到请求信号后，便撤销其请求信号；从模块接到请求信号后，在条件允许时发出回答信号，并<br>且经过一段时问（这段时问的设置对不同设备而言是不同的）确认主模块已收到回答信号后，自<br>动撤销回答信号。可见通信双方并无互锁关系。例如，CPU向主存写信息，CPU要先后给出地<br>址信号、写命令以及写入数据，即采用此种方式。</p><p>2、半互锁方式</p><p>主模块发出请求信号，必须待接到从模块的回答信号后再撤销其请求信号，有互锁关系：而<br>从模块在接到请求信号后发出回答信号，但不必等待获知主模块的请求信号已经撤销，而是隔一<br>段时间后自动撒销其回答信号，无互锁关系。由于一方存在互锁关系，一方不存在互锁关系，故<br>称半互锁方式。例如，在多机系统中，某个CPU需访问共享存储器（供所有CPU访问的存储器）<br>时，该CPU发出访存命令后，必须收到存储器未被占用的回答信号，才能真正进行访存操作。</p><p>3、全互锁</p><p>主模块发出请求信号，必须待从模块回答后再撤销其请求信号；从模块发出回答信号，必须<br>待获知主模块请求信号已撤销后，再撤销其回答信号。双方存在互锁关系，故称为全互锁方式。<br>例如，在网络通信中，通信双方采用的就是全互锁方式。</p><p>半同步通信（同步、异步结合）</p><ul><li>同步:发送方用系统 时钟前沿 发信号；接收方用系统 时钟后沿 判断、识别</li><li>异步：允许不同速度的模块和谐工作，增加一条 “等待”响应信号 WAIT</li></ul><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%BA%8C/image-20230828112117228.png" class="" title="image-20230828112117228"><p>以输入数据为例的半通信时序</p><ul><li><p>T1:主模块发出地址信息</p></li><li><p>T2：主模块发出命令</p></li><li><p>T2当WAIT为低电平时，进入等待，Tw的宽度与T的宽度一致。</p></li><li></li><li></li><li></li><li><p>T3:从模块提供数据。</p></li><li><p>T4:主模块撤销读命令，从模块撤销数据。</p></li></ul><p>上述三种通信的共同电：</p><ul><li>主模块发地址、命令占用总线</li><li>从模块准备数据        不占用总线  总线空闲</li><li>从模块向主模块发数据     占用总线</li></ul><p>分离式通信</p><p>以上三种通信方式都是从主模块发出地址和读写命令开始，直到数据传输结束。在整个传输周期中，系统总线的使用权完全由占有使用权的主模块和由它选中的从模块占据。进一步分析读命令传输周期，发现除了中请总线这一阶段外，其余时间主要花费在如下3个方面。<br>①主模块通过传输总线向从模块发送地址和命令。<br>②从模块按照命令进行读数据的必要淮备。<br>③从模块经数据总线向主模块提供数据。·<br>由②可见，对系统总线而言，从模块内部读数据过程并无实质性的信息传输，总线纯属空闲等待，为了克服和利用这种消极等待，尤其在大型计算机系统中，总线的负载已处于饱和状态，充分挖掘系统总线每瞬间的潜力，对提高系统性能起到极大作用。为此人们又提出了“分离式”的通信方式，其基本思想是将一个传输周期（或总线周期）分解为两个子周期。在第一个子周期中，主模块A在获得总线使用权后将命令、地址以及其他有关信息，包括该主模块编号（当有多个主模块时，此编号尤为重要)发到系统总线上，经总线传输后，由有关的从模块B接收下来。主模块A向系统总线发布这些信息只占用总线很短的时间，一旦发送完，立即放弃总线使州权，以便其他模块使用。在第二个子周期中，当B模块收到A模块发来的有关命令信号后，经选择、译码、读取等一系列内部操作，将A模块所需的数据准备好，使出B模块中请总线使用权，一旦获谁，B模块便将A模块的编号、B模块的地址、A模块所器的数据等一系列信息送到总线上，供A模块接收。很明显，上述两个传输子周期都只有单方向的信息流，每个模块都变成了主模块。</p><p>分离式通信特点：</p><ul><li>各模块欲占用总线使用权都必须提出申请。</li><li>在得到总线使用权后，主模块在限定的刷间内向对方传送信总，采用同步方式传送，不再等待对方的回答信号。</li><li>各模块在准备数据的过程中都不占用总线，使总线可接受其他模块的请求。</li><li>总线被占用时都在做有效工作，或者通过它发送命令，或者通过它传送数据，不存在空闲</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>(一)计算机系统概论</title>
    <link href="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/"/>
    <url>/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h4 id="1-1-计算机系统简介"><a href="#1-1-计算机系统简介" class="headerlink" title="1.1 计算机系统简介"></a>1.1 计算机系统简介</h4><h5 id="1-1-1-计算机的软硬件概念"><a href="#1-1-1-计算机的软硬件概念" class="headerlink" title="1.1.1 计算机的软硬件概念"></a>1.1.1 计算机的软硬件概念</h5><p><strong>计算机系统有“硬件”和“软件”两大部分组成。</strong></p><p>​<strong>硬件</strong>：计算机的实体，如主机、外设等</p><p>​<strong>软件</strong>：由具有各类特殊的功能的信息（程序）组成</p><p>软件可以分为</p><p>​<strong>系统软件</strong>：用来管理整个计算机系统 。如 语言处理程序、操作系统、服务型程序、数据库管理系统、网络软件</p><p>​<strong>应用软件</strong>：按任务需要编制成的各种程序</p><h5 id="1-1-2-计算机系统的成层次结构"><a href="#1-1-2-计算机系统的成层次结构" class="headerlink" title="1.1.2 计算机系统的成层次结构"></a>1.1.2 计算机系统的成层次结构</h5><p><strong>方向：M4→M3→M2→M1→M0</strong></p><p>虚拟机器M4(高级语言机器)用编译程序翻译成汇编语言程序</p><p>虚拟机器M3(汇编语言机器)用汇编程序翻译成机器语言程序</p><p>虚拟机器M2(操作系统机器)用机器语言解释操作系统</p><p>传统机器M1(机器语言机器)用微程序解释机器指令</p><p>微程序机器M0(微指令系统)有硬件直接执行微指令</p><h5 id="1-1-3计算机组成和计算机体系结构"><a href="#1-1-3计算机组成和计算机体系结构" class="headerlink" title="1.1.3计算机组成和计算机体系结构"></a>1.1.3计算机组成和计算机体系结构</h5><p><strong>计算机体系结构</strong>：是指那些能够被程序员所见到的计算机系统的属性，即概念性的结构与功能特性。计算机系统的属性通常是指用机器语言编程的程序员所能看到的传统机器的属性，包括指令集、数据类型、存储器寻址技术、I&#x2F;O机理等，大都属于抽象概念</p><p><strong>计算机组成</strong>：是指如何实现计算机体系结构所体现的属性，它包含了许多对程序员来说是透明的硬件细节。例如，指令系统体现了机器的属性，这属于<em>计算机结构</em>的问题。但是指令的实现，即如何取出指令，分析指令，取操作数、运算、送结果等，这些属于<em>计算机组成问题</em></p><h4 id="1-2计算机的基本组成"><a href="#1-2计算机的基本组成" class="headerlink" title="1.2计算机的基本组成"></a>1.2计算机的基本组成</h4><h5 id="1-2-1冯·诺伊曼计算机的特点"><a href="#1-2-1冯·诺伊曼计算机的特点" class="headerlink" title="1.2.1冯·诺伊曼计算机的特点"></a>1.2.1冯·诺伊曼计算机的特点</h5><ul><li>计算机有运算器、存储器、控制器、输入设备、输出设备五大部件组成</li><li>指令和数据以同等的地位存放与存储器内，并可按地址访问</li><li>指令和数据均用二进制数表示</li><li>指令有操作码和地址码组成，操作码可以用来表示操作的性质，地址码可以用来表示操作数在存储器中的位置</li><li>指令在存储器内按顺序存放。通常，指令是顺序执行的，在特定的条件下，可以根据运算结果或根据设定的条件改变执行的顺序</li><li>机器以运算器为中心，输入输出设备与存储器间的数据传送通过运算器完成</li></ul><h5 id="1-2-2计算机的硬件框图"><a href="#1-2-2计算机的硬件框图" class="headerlink" title="1.2.2计算机的硬件框图"></a>1.2.2计算机的硬件框图</h5><p>典型的冯·诺伊曼计算机解构框图</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827201047407.png" class="" title="image-20230827201047407"><p>图中各部件的功能如下：</p><ul><li>运算器用来完成算数运算和逻辑运算，并将运算的中间结果暂存在运算器内</li><li>存储器用来存放数据指令和程序</li><li>控制器用来控制、指挥程序和数据的输入、运行及处理运算结果</li><li>输入设备用来将人们熟悉的信息形式转化为机器能识别的信息形式，常见的有鼠标、键盘等</li><li>输出设备可将机器运算结果转换为人们熟悉的信息形式，如打印机输出、显示器输出等</li></ul><p>由于运算器和控制器在逻辑关系和电路结构上联系十分紧密，尤其在大规模集成电路制作工艺出现后，这两大部件往往集成在同一个芯片上，因此，通常将他们合起来称作中央处理器（Central Processing Unit,CPU）。把输入输出设备简称为I&#x2F;O设备（Input&#x2F;Output Equipment）</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827201352277.png" class=""><p>主存储器是存储器子系统中的一类，用来存放程序和数据，可以直接与CPU交换信息。另一类成为辅助存储器，简称辅存，又称外存。</p><p>算数逻辑单元（Arithmetic Logic Unit,ALU）简称算逻部件，用来完成算术逻辑运算。</p><p>控制单元（Control Unit ,CU）用来解释存储器中的指令，并发出各种操作命令来执行指令。</p><p>ALU和CU是CPU的核心</p><p>I&#x2F;O设备也受CU控制，用来完成相对应的输入和输出操作</p><h5 id="1-2-3计算机的工作步骤"><a href="#1-2-3计算机的工作步骤" class="headerlink" title="1.2.3计算机的工作步骤"></a>1.2.3计算机的工作步骤</h5><p>用计算机解决问题有两大步骤。一是上机前的准备，另一个是上机运行</p><h6 id="上机前的准备"><a href="#上机前的准备" class="headerlink" title="上机前的准备"></a>上机前的准备</h6><ol><li>建立数学模型</li><li>确定计算方法</li><li>编制解题程序</li></ol><h6 id="计算机的工作过程"><a href="#计算机的工作过程" class="headerlink" title="计算机的工作过程"></a>计算机的工作过程</h6><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827202137512.png" class="" title="image-20230827202137512"><h6 id="存储器的基本组成："><a href="#存储器的基本组成：" class="headerlink" title="存储器的基本组成："></a>存储器的基本组成：</h6><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827201750247.png" class=""><p>主存储器包括存储体、各种逻辑部件及控制电路，存储体由很多存储单元组成，每个存储单元又包括若干个存储元件，每个存储元件存放一个二进制代码“0”和“1”。一个存储单元可以储存一串二进制代码，称这串二进制代码为一个存储字，这串二进制代码的位数成为存储字长。</p><ol><li>存储单元:存放一串二进制代码</li><li>存储字:存储单元中二进制代码的组合</li><li>存储字长:存储单元中二进制代码的位数 每个存储单元赋予一个地址号</li></ol><p>为了实现按地址访问的形式，主存中还得必须配置两个寄存器MAR和MDR</p><ol><li>MAR:存储器地址寄存器，反映存储单元的个数</li><li>MDR:存储器数据寄存器，反映存储字节长度</li></ol><p>设RAM&#x3D;4 位  MDR&#x3D;8位则 存储单元个数位16个，存储字长为8</p><h6 id="运算器的基本组成及操作过程"><a href="#运算器的基本组成及操作过程" class="headerlink" title="运算器的基本组成及操作过程"></a>运算器的基本组成及操作过程</h6><p>运算器最少包括三个寄存器和一个算数逻辑单元（ALU）其中ACC是累加器，MQ为乘商寄存器，X为操作数寄存器</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827202644280.png" class="" title="image-20230827202644280"><p>M表示存储器的任意地址号，[M]表示对应M地址单元中的内容；X表示X寄存器,[X]表示X寄存器的内容；ACC表示累加器，[ACC]表示累加器中的内容；MQ表示乘商寄存器，[MQ]表示乘商寄存器中的内容</p><p>加法操作过程</p><p>假设ACC已经有前一时刻的运算运算结果，并作为下述运算中的一个操作数</p><p>即将[ACC]中看作被加数，先从主存中取一个存放在M地址号单元的加数[M]，送至运算器的X寄存器中，然后将被加数[ACC]与加数[X]相加，结果(和)保留在ACC中</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827202827546.png" class="" title="image-20230827202827546"><p>减法操作过程</p><p>即将[ACC]中看作被减数，先从主存中取一个存放在M地址号单元的减数[M]，送至运算器的X寄存器中，然后将[ACC]-[X]，结果(差)保留在ACC中</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827202846884.png" class="" title="image-20230827202846884"><p>乘法操作过程</p><p>即将[ACC]看作被乘数，先取出存放在主存M号地址单元中的乘数[M]并送入乘商寄存器MQ,在把被乘数送入X寄存器，并将ACC清“0”,然后[X]和[MQ]相乘，结果（积）的高位保留在ACC中，地位保留MQ中。</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827202907215.png" class="" title="image-20230827202907215"><p>除法操作过程</p><p>即将[ACC]看作被除数，先取出存放在M地址单元内的除数[M]并送至X寄存器，然后[ACC]除以[X]，结果（商）暂留与MQ,[ACC]为余数R。若需要将商保留在ACC中，只需要做一步[MQ]→ACC即可</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827202931819.png" class="" title="image-20230827202931819"><p>控制器</p><p>控制器由程序计数器（Program Counter,PC）、指令寄存器（Instruction Register,IR）以及控制单元（CU）组成</p><p>PC：用来存放当前欲执行指令的地址，它与主存的MAR之间有一条直接通路且具有自动加1的功能，即可自动形成下一条指令的地址。</p><p>IR:用来存放当前的指令，IR的内来自主存的MDR。IR中的操作码（OP(IR)）送至CU,记作OP(IR)→CU,用来分析指令；其地址码（Ad(IR)）作为操作数的地址送至存储器的MAR,记作Ad(IR)→MAR。</p><p>CU：用来分析当前的指令所需完成的操作，并发出各种微操作命令序号，用以控制所有被控制对象</p><p>完成一条指令需要三个步骤：取指令、分析指令、执行指令</p><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827203029187.png" class="" title="image-20230827203029187"><p>主机完成一条指令的过程</p><p>取指数为例</p><ol><li><p>PC把指令送给MAR</p></li><li><p>MAR把指令送给存储体</p></li><li><p>在控制器的控制下，把存储体指定存储单元中的那条取数指令取出，并送入MDR中</p></li><li><p>将取出的指令送入IR中</p><hr></li><li><p>把IR的操作码送入CU</p></li><li><p>CU经过译码后，在控制器的控制下，把指令中的地址部分送给存储器，以便数据从存储体中取出</p></li><li><p>MAR将地址送给存储体</p></li><li><p>在控制器的控制之下，把存储体中我们需要取的数送至MDR中</p></li><li><p>然后将MDR的数据送入ACC</p></li></ol><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827203302609.png" class="" title="image-20230827203302609"><p>例子：</p><p>首先按下图的有序指令和数据，通过键盘输入到主从第0号至第12号单元中，并置PC的初始值为0（令程序的首选地址为0）。启动机器后，计算机便自动按存储器中所存放的指令顺序有序地逐条完成取指令、分析指令、和执行指令，直至最后一条指令为止。</p><p>例如</p><ul><li>PC→MAR,并命令存储器做读操作，此时0号单元中的内容”0000010000001000”,便被送入到MDR内</li><li>MDR→IR,完成一条取指令的过程</li><li>经过CU分析（记作OP(IR)→MAR）,操作码为“000001”为取数指令</li><li>于是CU将IR中的地址码“0000001000”送至MAR(记作Ad(IR)→MAR),并命令存储器做只读操作</li><li>将地址单元的操作数X送至MDR</li><li>再由MDR中送至ACC中，完成指令的执行过程，此时完成第一条取数指令的全过程，即操作数在X送至运算器ACC中</li><li>PC完成自动加1操作，形成下一条指令的地址“1”</li><li>PC将第二条指令送入MAR中，命令主存储器做只读操作，将“0001000000001001”送入MDR中</li><li>MDR→IR，完成一条取指令的过程</li><li>经过CU分析（记作OP(IR)→MAR）,操作码为“000100”为乘法指令</li><li>CU向存储体发出读命令，取出对应地址为“0000001001”单元的操作数a</li><li>a经MDR送至运算器MQ</li><li>CU在向运算器发送乘法操作命令，完成ax的运算，并把结果ax存放在ACC中</li><li>PC+1→PC,形成下一条指令的地址“2”号</li></ul><img src="/2023/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%80/image-20230827203825422.png" class="" title="image-20230827203825422">]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
